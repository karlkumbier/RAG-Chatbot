from langchain_core.messages import AIMessage
from typing import Dict
import re


def make_chart_node_(state: Dict, name: str) -> Dict:
  """ 
  Runs figure generating code block and returns result or error. 
  
  Graph `state` must include `df` (pandas DataFrame) entry with data to be 
  plotted.
  """
  
  code = state["messages"][-1].content
  code = code.replace("fig.show()", "")
  
  if state.get("df") is None:
    raise Exception("No active data")
  else:
    _globals = {"df": state["df"]}
    result = run_python_fig_code(code, _globals) 
  
  if isinstance(result, Exception):
    result = f"Failed to execute CODE:\n\n{code}.\n\nERROR: {repr(result)}"
    state["messages"] = [AIMessage(result, name=name)]
  else:
    state["code"] = code
    state["fig"] = result
  
  return state

def run_python_fig_code(code: str, _globals: Dict) -> str:
  """Executes python code block and extract `fig` variable""" 
  code = extract_python_code(code)
  
  # Check that code was properly extracted
  if code is None:
    result = SyntaxError(
      "Perhaps you forgot to wrap your code in ```. Example format: ```code```"
    )
    
    return result
  
  try:
    exec(code, _globals)
    result = _globals.get("fig")
  except BaseException as e:
    result = e
  
  # Check that a 'fig' variable was generated by code block
  if result is None:
    result = NameError("name \'fig\' is not defined")
  
  return result

def extract_python_code(code: str) -> str:
  """Extract formatted block of python code callable by `exec`"""  
  code = code.replace("```python", "```")
  pattern = r'```\s(.*?)```'
  matches = re.findall(pattern, code, re.DOTALL)
  if not matches:
    return None
  else:
    return matches[0]