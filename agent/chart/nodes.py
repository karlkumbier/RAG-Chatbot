from langchain_core.prompts import (
  ChatPromptTemplate, MessagesPlaceholder, PromptTemplate
)

from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import AIMessage
from typing import Dict, Literal

from agent.chart.utils import run_python_fig_code
from agent.chart.prompts import *
from agent.models import gpt4

LLM = gpt4
NTRY = 10

def initialize(state: Dict, config: Dict) -> Dict:
  """ Checks for valid state input and initializes state variables"""
  verbose = config.get("verbose", False)
  
  if verbose:
    print("--- Initializing ---")
  
  # Check for existence of dataset 
  if config.get("df") is None:
    raise Exception("Must provide dataframe `df` in config")
  
  if state.get("messages") is None:
    state["messages"] = []
  
  # Reset debug attempts  
  state["ntry"] = 0
  
  return state


def route(state: Dict, config: Dict) -> Literal["debug", "summarize"]:
  """ Routes agent action to either debugger or program end """
  ntry = config.get("ntry", NTRY)
  
  if state.get("fig") is None:
    return "summarize" if state["ntry"] > ntry else "debug"
  else:
    return "summarize"


def generate_code(state: Dict, config: Dict) -> Dict:
  """ Provides natural language description of chart generated by agent. """
  df = config.get("df")[0]
  llm = config.get("llm", LLM)
  verbose = config.get("verbose", False)
  
  if verbose:
    print("--- Generating figure code ---")
    
  # call llm to generate figure code
  prompt = ChatPromptTemplate.from_messages([
    ("system", MAKE_CHART_CODE_PROMPT),
    MessagesPlaceholder(variable_name="messages"),
  ])   
  
  chain = prompt | llm | StrOutputParser()
  state["column_names"] = df.columns
  result = chain.invoke(state)
  
  # update state
  state["code"] = result.replace("fig.show()", "")
  state["ntry"] += 1
  return state


def run_code(state: Dict, config: Dict) -> Dict:
  """ Runs figure generating code block and returns result or error. """  
  df = config.get("df")[0]   
  
  if df is None:
    raise Exception("No active data")
  else:
    code = state["code"]
    result = run_python_fig_code(code, {"df": df}) 
  
    if isinstance(result, Exception):
      result = f"Failed to execute CODE:\n\n{code}.\n\nERROR: {repr(result)}"
      state["messages"] = [AIMessage(result)]
    else:
      state["messages"] = [AIMessage("SUCCESS!")]
      state["fig"] = result
  
    return state


def debug_code(state: Dict, config: Dict) -> Dict:
  """ Provides natural language description of chart generated by agent. """
  df = config.get("df")[0]
  llm = config.get("llm", LLM)
  verbose = config.get("verbose", False)
  
  if verbose:
    print("--- Debugging figure code ---")
    
  # call llm to generate figure code
  prompt = ChatPromptTemplate.from_messages([
    ("system", DEBUG_CHART_CODE_PROMPT),
    MessagesPlaceholder(variable_name="messages"),
  ])   
  
  chain = prompt | llm | StrOutputParser()
  
  invoke_state = {
    "column_names":df.columns, 
    "code": state["code"],
    "messages":state["messages"]
  }
  
  result = chain.invoke(invoke_state)

  # update state
  state["code"] = result.replace("fig.show()", "")
  state["ntry"] += 1
  return state 


def summarize_chart(state: Dict, config: Dict) -> Dict:
  """ Provides natural language description of chart generated by agent. """
  llm = config.get("llm", LLM)
  verbose = config.get("verbose", False)
  
  if verbose:
    print("--- Summarizing figure code ---")
    
  prompt = PromptTemplate.from_template(SUMMARIZE_CHART_PROMT)  
  chain = prompt | llm | StrOutputParser()  
  
  code = state["code"]
  message = state["messages"][-1].content
  invoke_state = {"code":code, "message": message}
  state["fig_summary"] = chain.invoke(invoke_state)
  return state