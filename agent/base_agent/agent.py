from typing_extensions import TypedDict
from typing import Dict

class BaseState(TypedDict):
  question : str # user question / request
  result: str # output response generated by llm
  
class BaseAgent:
  def __init__(self):
    self.state = None
    
  def __print__(self):
    if self.agent is None:
      raise Exception("Agent graph not built")
    
    self.agent.get_graph().print_ascii()
  
    
  def __clear_state__(self):
    self.state = None
  
  
  def __set_state__(self, state: Dict, config: Dict):
    self.state = self.invoke(state, config)
  
  
  def invoke(self, state: Dict, config: Dict | None):
    if self.agent is None:
      raise Exception("Agent graph not built")
    
    return self.agent.invoke(state, config)
  

  def get(self, key: str):
    if self.state is None:
      return None
    else:
      return self.state.get(key)